// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace TodoListService-ManualJwt
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Clouddns.
    /// </summary>
    public static partial class ClouddnsExtensions
    {
            /// <summary>
            /// List existing R53 healthchecks.
            /// </summary>
            /// List existing R53 healthchecks.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// zoneID
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='filter'>
            /// filter
            /// </param>
            public static Result ListHealthchecks(this IClouddns operations, string zoneID, string authorization, string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IClouddns)s).ListHealthchecksAsync(zoneID, authorization, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List existing R53 healthchecks.
            /// </summary>
            /// List existing R53 healthchecks.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// zoneID
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='filter'>
            /// filter
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Result> ListHealthchecksAsync(this IClouddns operations, string zoneID, string authorization, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHealthchecksWithHttpMessagesAsync(zoneID, authorization, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new R53 healthcheck
            /// </summary>
            /// Create a new R53 healthcheck
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// A
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='healthcheckAdd'>
            /// HealthcheckPayload contains all Body Parameters
            /// </param>
            public static Result AddHealthcheck(this IClouddns operations, string zoneID, string authorization, HealthcheckPayload healthcheckAdd = default(HealthcheckPayload))
            {
                return Task.Factory.StartNew(s => ((IClouddns)s).AddHealthcheckAsync(zoneID, authorization, healthcheckAdd), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new R53 healthcheck
            /// </summary>
            /// Create a new R53 healthcheck
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// A
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='healthcheckAdd'>
            /// HealthcheckPayload contains all Body Parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Result> AddHealthcheckAsync(this IClouddns operations, string zoneID, string authorization, HealthcheckPayload healthcheckAdd = default(HealthcheckPayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddHealthcheckWithHttpMessagesAsync(zoneID, authorization, healthcheckAdd, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get details of a healthcheck
            /// </summary>
            /// Get details of a healthcheck
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// A
            /// </param>
            /// <param name='healthcheckID'>
            /// A
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='filter'>
            /// filter
            /// </param>
            public static Result GetHealthcheckDetails(this IClouddns operations, string zoneID, string healthcheckID, string authorization, string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IClouddns)s).GetHealthcheckDetailsAsync(zoneID, healthcheckID, authorization, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get details of a healthcheck
            /// </summary>
            /// Get details of a healthcheck
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// A
            /// </param>
            /// <param name='healthcheckID'>
            /// A
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='filter'>
            /// filter
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Result> GetHealthcheckDetailsAsync(this IClouddns operations, string zoneID, string healthcheckID, string authorization, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHealthcheckDetailsWithHttpMessagesAsync(zoneID, healthcheckID, authorization, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete this healthcheck.
            /// </summary>
            /// Delete this healthcheck.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// A
            /// </param>
            /// <param name='healthcheckID'>
            /// A
            /// </param>
            /// <param name='comment'>
            /// A
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            public static Result DeleteHealthcheck(this IClouddns operations, string zoneID, string healthcheckID, string comment, string authorization)
            {
                return Task.Factory.StartNew(s => ((IClouddns)s).DeleteHealthcheckAsync(zoneID, healthcheckID, comment, authorization), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete this healthcheck.
            /// </summary>
            /// Delete this healthcheck.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// A
            /// </param>
            /// <param name='healthcheckID'>
            /// A
            /// </param>
            /// <param name='comment'>
            /// A
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Result> DeleteHealthcheckAsync(this IClouddns operations, string zoneID, string healthcheckID, string comment, string authorization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteHealthcheckWithHttpMessagesAsync(zoneID, healthcheckID, comment, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update this healthcheck.
            /// </summary>
            /// Update this healthcheck.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// A
            /// </param>
            /// <param name='healthcheckID'>
            /// A
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='healthcheckUpdate'>
            /// HealthcheckPayload contains all Body Parameters
            /// </param>
            public static Result UpdateHealthcheckDetails(this IClouddns operations, string zoneID, string healthcheckID, string authorization, HealthcheckPayload healthcheckUpdate = default(HealthcheckPayload))
            {
                return Task.Factory.StartNew(s => ((IClouddns)s).UpdateHealthcheckDetailsAsync(zoneID, healthcheckID, authorization, healthcheckUpdate), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update this healthcheck.
            /// </summary>
            /// Update this healthcheck.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// A
            /// </param>
            /// <param name='healthcheckID'>
            /// A
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='healthcheckUpdate'>
            /// HealthcheckPayload contains all Body Parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Result> UpdateHealthcheckDetailsAsync(this IClouddns operations, string zoneID, string healthcheckID, string authorization, HealthcheckPayload healthcheckUpdate = default(HealthcheckPayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateHealthcheckDetailsWithHttpMessagesAsync(zoneID, healthcheckID, authorization, healthcheckUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List available zones. (Limited by user's rights)
            /// </summary>
            /// List available zones. (Limited by user's rights)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='token'>
            /// Optional to continue paging through a previous list request
            /// </param>
            /// <param name='filter'>
            /// Optional to filter the returned results
            /// </param>
            public static Result ListZoneId(this IClouddns operations, string authorization, string token = default(string), string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IClouddns)s).ListZoneIdAsync(authorization, token, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List available zones. (Limited by user's rights)
            /// </summary>
            /// List available zones. (Limited by user's rights)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='token'>
            /// Optional to continue paging through a previous list request
            /// </param>
            /// <param name='filter'>
            /// Optional to filter the returned results
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Result> ListZoneIdAsync(this IClouddns operations, string authorization, string token = default(string), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListZoneIdWithHttpMessagesAsync(authorization, token, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add Zone. (Only Admins can create)
            /// </summary>
            /// Add Zone. (Only Admins can create)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='zoneAdd'>
            /// ZoneAddPayload contains all ADD Body Parameters
            /// </param>
            public static Result AddZone(this IClouddns operations, string authorization, ZoneAddPayload zoneAdd = default(ZoneAddPayload))
            {
                return Task.Factory.StartNew(s => ((IClouddns)s).AddZoneAsync(authorization, zoneAdd), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Zone. (Only Admins can create)
            /// </summary>
            /// Add Zone. (Only Admins can create)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='zoneAdd'>
            /// ZoneAddPayload contains all ADD Body Parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Result> AddZoneAsync(this IClouddns operations, string authorization, ZoneAddPayload zoneAdd = default(ZoneAddPayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddZoneWithHttpMessagesAsync(authorization, zoneAdd, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get zone details for this specific zone.
            /// </summary>
            /// Get zone details for this specific zone.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// zoneID given in the Request Path
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='filter'>
            /// Optional to filter the fields of the returned details
            /// </param>
            public static Result GetZoneDetails(this IClouddns operations, string zoneID, string authorization, string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IClouddns)s).GetZoneDetailsAsync(zoneID, authorization, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get zone details for this specific zone.
            /// </summary>
            /// Get zone details for this specific zone.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// zoneID given in the Request Path
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='filter'>
            /// Optional to filter the fields of the returned details
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Result> GetZoneDetailsAsync(this IClouddns operations, string zoneID, string authorization, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetZoneDetailsWithHttpMessagesAsync(zoneID, authorization, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update Zone Details
            /// </summary>
            /// Update Zone Details
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// A
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='zoneUpdate'>
            /// ZoneUpdatePayload contains all Update Body Parameters
            /// </param>
            public static Result UpdateZoneDetails(this IClouddns operations, string zoneID, string authorization, ZoneUpdatePayload zoneUpdate = default(ZoneUpdatePayload))
            {
                return Task.Factory.StartNew(s => ((IClouddns)s).UpdateZoneDetailsAsync(zoneID, authorization, zoneUpdate), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Zone Details
            /// </summary>
            /// Update Zone Details
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// A
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='zoneUpdate'>
            /// ZoneUpdatePayload contains all Update Body Parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Result> UpdateZoneDetailsAsync(this IClouddns operations, string zoneID, string authorization, ZoneUpdatePayload zoneUpdate = default(ZoneUpdatePayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateZoneDetailsWithHttpMessagesAsync(zoneID, authorization, zoneUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Zone
            /// </summary>
            /// Delete Zone
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// A
            /// </param>
            /// <param name='comment'>
            /// Why this is being deleted.
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            public static Result DeleteZone(this IClouddns operations, string zoneID, string comment, string authorization)
            {
                return Task.Factory.StartNew(s => ((IClouddns)s).DeleteZoneAsync(zoneID, comment, authorization), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Zone
            /// </summary>
            /// Delete Zone
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// A
            /// </param>
            /// <param name='comment'>
            /// Why this is being deleted.
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Result> DeleteZoneAsync(this IClouddns operations, string zoneID, string comment, string authorization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteZoneWithHttpMessagesAsync(zoneID, comment, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List All Records in the zone
            /// </summary>
            /// List All Records in the zone
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// A
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='token'>
            /// Optional to continue paging through a previous list request
            /// </param>
            /// <param name='filter'>
            /// Optional to filter the fields of the returned details
            /// </param>
            public static Result ListZoneRecords(this IClouddns operations, string zoneID, string authorization, string token = default(string), string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IClouddns)s).ListZoneRecordsAsync(zoneID, authorization, token, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List All Records in the zone
            /// </summary>
            /// List All Records in the zone
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// A
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='token'>
            /// Optional to continue paging through a previous list request
            /// </param>
            /// <param name='filter'>
            /// Optional to filter the fields of the returned details
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Result> ListZoneRecordsAsync(this IClouddns operations, string zoneID, string authorization, string token = default(string), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListZoneRecordsWithHttpMessagesAsync(zoneID, authorization, token, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a record (no approval workflow)
            /// </summary>
            /// create a record (no approval workflow)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// A
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='recordAdd'>
            /// RecordPayload contains all Add Body Parameters
            /// </param>
            public static Result CreateZoneRecord(this IClouddns operations, string zoneID, string authorization, RecordPayload recordAdd = default(RecordPayload))
            {
                return Task.Factory.StartNew(s => ((IClouddns)s).CreateZoneRecordAsync(zoneID, authorization, recordAdd), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a record (no approval workflow)
            /// </summary>
            /// create a record (no approval workflow)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// A
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='recordAdd'>
            /// RecordPayload contains all Add Body Parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Result> CreateZoneRecordAsync(this IClouddns operations, string zoneID, string authorization, RecordPayload recordAdd = default(RecordPayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateZoneRecordWithHttpMessagesAsync(zoneID, authorization, recordAdd, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get details of the record
            /// </summary>
            /// Get details of the record
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// A
            /// </param>
            /// <param name='recordID'>
            /// A
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='filter'>
            /// Optional to filter the fields of the returned details
            /// </param>
            public static Result GetRecordDetails(this IClouddns operations, string zoneID, string recordID, string authorization, string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IClouddns)s).GetRecordDetailsAsync(zoneID, recordID, authorization, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get details of the record
            /// </summary>
            /// Get details of the record
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// A
            /// </param>
            /// <param name='recordID'>
            /// A
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='filter'>
            /// Optional to filter the fields of the returned details
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Result> GetRecordDetailsAsync(this IClouddns operations, string zoneID, string recordID, string authorization, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRecordDetailsWithHttpMessagesAsync(zoneID, recordID, authorization, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the record (without Approval workflow)
            /// </summary>
            /// Delete the record (without Approval workflow)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// zoneID
            /// </param>
            /// <param name='recordID'>
            /// recordID
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='filter'>
            /// Optional to filter the fields of the returned details
            /// </param>
            public static Result DeleteRecord(this IClouddns operations, string zoneID, string recordID, string authorization, string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IClouddns)s).DeleteRecordAsync(zoneID, recordID, authorization, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the record (without Approval workflow)
            /// </summary>
            /// Delete the record (without Approval workflow)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// zoneID
            /// </param>
            /// <param name='recordID'>
            /// recordID
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='filter'>
            /// Optional to filter the fields of the returned details
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Result> DeleteRecordAsync(this IClouddns operations, string zoneID, string recordID, string authorization, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRecordWithHttpMessagesAsync(zoneID, recordID, authorization, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a record (no approval workflow)
            /// </summary>
            /// Update a record (no approval workflow)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// zoneID
            /// </param>
            /// <param name='recordID'>
            /// recordID
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='recordUpdate'>
            /// RecordPayload contains all Update Body Parameters
            /// </param>
            public static Result UpdateRecordDetails(this IClouddns operations, string zoneID, string recordID, string authorization, RecordPayload recordUpdate = default(RecordPayload))
            {
                return Task.Factory.StartNew(s => ((IClouddns)s).UpdateRecordDetailsAsync(zoneID, recordID, authorization, recordUpdate), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a record (no approval workflow)
            /// </summary>
            /// Update a record (no approval workflow)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// zoneID
            /// </param>
            /// <param name='recordID'>
            /// recordID
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='recordUpdate'>
            /// RecordPayload contains all Update Body Parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Result> UpdateRecordDetailsAsync(this IClouddns operations, string zoneID, string recordID, string authorization, RecordPayload recordUpdate = default(RecordPayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateRecordDetailsWithHttpMessagesAsync(zoneID, recordID, authorization, recordUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of open requests, optionally via filter statement, closed requests.
            /// </summary>
            /// List of open requests, optionally via filter statement, closed requests.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='token'>
            /// Optional to continue paging through a previous list request
            /// </param>
            /// <param name='filter'>
            /// Optional to filter the returned results
            /// </param>
            public static Result ListRequests(this IClouddns operations, string authorization, string token = default(string), string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IClouddns)s).ListRequestsAsync(authorization, token, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of open requests, optionally via filter statement, closed requests.
            /// </summary>
            /// List of open requests, optionally via filter statement, closed requests.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='token'>
            /// Optional to continue paging through a previous list request
            /// </param>
            /// <param name='filter'>
            /// Optional to filter the returned results
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Result> ListRequestsAsync(this IClouddns operations, string authorization, string token = default(string), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRequestsWithHttpMessagesAsync(authorization, token, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns request details, including approve/deny links.
            /// </summary>
            /// Returns request details, including approve/deny links.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestID'>
            /// requestID
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='format'>
            /// JSON or HTML - Optionally returns the data in HTML instead of JSON.
            /// </param>
            /// <param name='approvercode'>
            /// An approver code, sent in email for to the designated approver(s.)
            /// </param>
            public static Result GetRequestDetails(this IClouddns operations, string requestID, string authorization, string format = default(string), string approvercode = default(string))
            {
                return Task.Factory.StartNew(s => ((IClouddns)s).GetRequestDetailsAsync(requestID, authorization, format, approvercode), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns request details, including approve/deny links.
            /// </summary>
            /// Returns request details, including approve/deny links.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestID'>
            /// requestID
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='format'>
            /// JSON or HTML - Optionally returns the data in HTML instead of JSON.
            /// </param>
            /// <param name='approvercode'>
            /// An approver code, sent in email for to the designated approver(s.)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Result> GetRequestDetailsAsync(this IClouddns operations, string requestID, string authorization, string format = default(string), string approvercode = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRequestDetailsWithHttpMessagesAsync(requestID, authorization, format, approvercode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Approve or Deny request
            /// </summary>
            /// Approve or Deny request
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestID'>
            /// requestID
            /// </param>
            /// <param name='action'>
            /// approve or deny
            /// </param>
            /// <param name='approvercode'>
            /// An approver code, previously sent in email for to the designated
            /// approver(s.)
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            public static Result RequestApproval(this IClouddns operations, string requestID, string action = default(string), string approvercode = default(string), string authorization = default(string))
            {
                return Task.Factory.StartNew(s => ((IClouddns)s).RequestApprovalAsync(requestID, action, approvercode, authorization), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Approve or Deny request
            /// </summary>
            /// Approve or Deny request
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestID'>
            /// requestID
            /// </param>
            /// <param name='action'>
            /// approve or deny
            /// </param>
            /// <param name='approvercode'>
            /// An approver code, previously sent in email for to the designated
            /// approver(s.)
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Result> RequestApprovalAsync(this IClouddns operations, string requestID, string action = default(string), string approvercode = default(string), string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RequestApprovalWithHttpMessagesAsync(requestID, action, approvercode, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Make a request to create a new record (will follow approval workflow)
            /// </summary>
            /// Make a request to create a new record (will follow approval workflow)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// zoneID
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='recordAdd'>
            /// RecordPayload contains all Add Body Parameters
            /// </param>
            public static Result RequestRecordCreation(this IClouddns operations, string zoneID, string authorization, RecordPayload recordAdd = default(RecordPayload))
            {
                return Task.Factory.StartNew(s => ((IClouddns)s).RequestRecordCreationAsync(zoneID, authorization, recordAdd), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Make a request to create a new record (will follow approval workflow)
            /// </summary>
            /// Make a request to create a new record (will follow approval workflow)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// zoneID
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='recordAdd'>
            /// RecordPayload contains all Add Body Parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Result> RequestRecordCreationAsync(this IClouddns operations, string zoneID, string authorization, RecordPayload recordAdd = default(RecordPayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RequestRecordCreationWithHttpMessagesAsync(zoneID, authorization, recordAdd, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Request deletion of the record (with Approval workflow)
            /// </summary>
            /// Request deletion of the record (with Approval workflow)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// zoneID
            /// </param>
            /// <param name='recordID'>
            /// recordID
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='filter'>
            /// Optional to filter the fields of the returned details
            /// </param>
            public static Result RequestRecordDeletion(this IClouddns operations, string zoneID, string recordID, string authorization, string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IClouddns)s).RequestRecordDeletionAsync(zoneID, recordID, authorization, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Request deletion of the record (with Approval workflow)
            /// </summary>
            /// Request deletion of the record (with Approval workflow)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// zoneID
            /// </param>
            /// <param name='recordID'>
            /// recordID
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='filter'>
            /// Optional to filter the fields of the returned details
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Result> RequestRecordDeletionAsync(this IClouddns operations, string zoneID, string recordID, string authorization, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RequestRecordDeletionWithHttpMessagesAsync(zoneID, recordID, authorization, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Request to update a record (with approval workflow)
            /// </summary>
            /// Request to update a record (with approval workflow)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// zoneID
            /// </param>
            /// <param name='recordID'>
            /// recordID
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='recordUpdate'>
            /// RecordPayload contains all Update Body Parameters
            /// </param>
            public static Result RequestRecordUpdation(this IClouddns operations, string zoneID, string recordID, string authorization, RecordPayload recordUpdate = default(RecordPayload))
            {
                return Task.Factory.StartNew(s => ((IClouddns)s).RequestRecordUpdationAsync(zoneID, recordID, authorization, recordUpdate), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Request to update a record (with approval workflow)
            /// </summary>
            /// Request to update a record (with approval workflow)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// zoneID
            /// </param>
            /// <param name='recordID'>
            /// recordID
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='recordUpdate'>
            /// RecordPayload contains all Update Body Parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Result> RequestRecordUpdationAsync(this IClouddns operations, string zoneID, string recordID, string authorization, RecordPayload recordUpdate = default(RecordPayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RequestRecordUpdationWithHttpMessagesAsync(zoneID, recordID, authorization, recordUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Request add of a HealthCheck (with approval workflow)
            /// </summary>
            /// Request add of a HealthCheck (with approval workflow)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// zoneID
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='healthcheckAdd'>
            /// HealthcheckPayload contains all Body Parameters
            /// </param>
            public static Result RequestHealthCheckCreation(this IClouddns operations, string zoneID, string authorization, HealthcheckPayload healthcheckAdd = default(HealthcheckPayload))
            {
                return Task.Factory.StartNew(s => ((IClouddns)s).RequestHealthCheckCreationAsync(zoneID, authorization, healthcheckAdd), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Request add of a HealthCheck (with approval workflow)
            /// </summary>
            /// Request add of a HealthCheck (with approval workflow)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zoneID'>
            /// zoneID
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='healthcheckAdd'>
            /// HealthcheckPayload contains all Body Parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Result> RequestHealthCheckCreationAsync(this IClouddns operations, string zoneID, string authorization, HealthcheckPayload healthcheckAdd = default(HealthcheckPayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RequestHealthCheckCreationWithHttpMessagesAsync(zoneID, authorization, healthcheckAdd, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Request update a HealthCheck (with approval workflow)
            /// </summary>
            /// Request update a HealthCheck (with approval workflow)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='healthcheckID'>
            /// healthcheckID
            /// </param>
            /// <param name='zoneID'>
            /// zoneID
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='healthcheckUpdate'>
            /// HealthcheckPayload contains all Body Parameters
            /// </param>
            public static Result RequestHealthCheckUpdation(this IClouddns operations, string healthcheckID, string zoneID, string authorization, HealthcheckPayload healthcheckUpdate = default(HealthcheckPayload))
            {
                return Task.Factory.StartNew(s => ((IClouddns)s).RequestHealthCheckUpdationAsync(healthcheckID, zoneID, authorization, healthcheckUpdate), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Request update a HealthCheck (with approval workflow)
            /// </summary>
            /// Request update a HealthCheck (with approval workflow)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='healthcheckID'>
            /// healthcheckID
            /// </param>
            /// <param name='zoneID'>
            /// zoneID
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='healthcheckUpdate'>
            /// HealthcheckPayload contains all Body Parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Result> RequestHealthCheckUpdationAsync(this IClouddns operations, string healthcheckID, string zoneID, string authorization, HealthcheckPayload healthcheckUpdate = default(HealthcheckPayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RequestHealthCheckUpdationWithHttpMessagesAsync(healthcheckID, zoneID, authorization, healthcheckUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Request Delete a HealthCheck (with approval workflow)
            /// </summary>
            /// Request Delete a HealthCheck (with approval workflow)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='healthcheckID'>
            /// healthcheckID
            /// </param>
            /// <param name='zoneID'>
            /// zoneID
            /// </param>
            /// <param name='comment'>
            /// comment
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            public static Result RequestHealthCheckDeletion(this IClouddns operations, string healthcheckID, string zoneID, string comment, string authorization)
            {
                return Task.Factory.StartNew(s => ((IClouddns)s).RequestHealthCheckDeletionAsync(healthcheckID, zoneID, comment, authorization), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Request Delete a HealthCheck (with approval workflow)
            /// </summary>
            /// Request Delete a HealthCheck (with approval workflow)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='healthcheckID'>
            /// healthcheckID
            /// </param>
            /// <param name='zoneID'>
            /// zoneID
            /// </param>
            /// <param name='comment'>
            /// comment
            /// </param>
            /// <param name='authorization'>
            /// CloudAPI Login Authorization
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Result> RequestHealthCheckDeletionAsync(this IClouddns operations, string healthcheckID, string zoneID, string comment, string authorization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RequestHealthCheckDeletionWithHttpMessagesAsync(healthcheckID, zoneID, comment, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
