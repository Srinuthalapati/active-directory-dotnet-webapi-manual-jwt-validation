// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace TodoListService-ManualJwt.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// HealthcheckPayload for Add &amp; Update
    /// </summary>
    public partial class HealthcheckPayload
    {
        /// <summary>
        /// Initializes a new instance of the HealthcheckPayload class.
        /// </summary>
        public HealthcheckPayload() { }

        /// <summary>
        /// Initializes a new instance of the HealthcheckPayload class.
        /// </summary>
        public HealthcheckPayload(string fqdn, string application, string environment, string owner, string comment, int port, string type, string resourcePath, string fullyQualifiedDomainName, int requestInterval, int failureThreshold, bool measureLatency, bool inverted, bool enableSNI, string alarmIdentifier = default(string), string regions = default(string), int? searchString = default(int?), int? iPAddress = default(int?), int? healthThreshold = default(int?), string insufficientDataHealthStatus = default(string), string childHealthChecks = default(string))
        {
            Fqdn = fqdn;
            Application = application;
            Environment = environment;
            Owner = owner;
            Comment = comment;
            Port = port;
            Type = type;
            ResourcePath = resourcePath;
            FullyQualifiedDomainName = fullyQualifiedDomainName;
            RequestInterval = requestInterval;
            FailureThreshold = failureThreshold;
            MeasureLatency = measureLatency;
            Inverted = inverted;
            EnableSNI = enableSNI;
            AlarmIdentifier = alarmIdentifier;
            Regions = regions;
            SearchString = searchString;
            IPAddress = iPAddress;
            HealthThreshold = healthThreshold;
            InsufficientDataHealthStatus = insufficientDataHealthStatus;
            ChildHealthChecks = childHealthChecks;
        }

        /// <summary>
        /// fqdn
        /// </summary>
        [JsonProperty(PropertyName = "fqdn")]
        public string Fqdn { get; set; }

        /// <summary>
        /// application
        /// </summary>
        [JsonProperty(PropertyName = "application")]
        public string Application { get; set; }

        /// <summary>
        /// environment
        /// </summary>
        [JsonProperty(PropertyName = "environment")]
        public string Environment { get; set; }

        /// <summary>
        /// owner
        /// </summary>
        [JsonProperty(PropertyName = "owner")]
        public string Owner { get; set; }

        /// <summary>
        /// comment
        /// </summary>
        [JsonProperty(PropertyName = "comment")]
        public string Comment { get; set; }

        /// <summary>
        /// Port
        /// </summary>
        [JsonProperty(PropertyName = "Port")]
        public int Port { get; set; }

        /// <summary>
        /// Type
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public string Type { get; set; }

        /// <summary>
        /// ResourcePath
        /// </summary>
        [JsonProperty(PropertyName = "ResourcePath")]
        public string ResourcePath { get; set; }

        /// <summary>
        /// FullyQualifiedDomainName
        /// </summary>
        [JsonProperty(PropertyName = "FullyQualifiedDomainName")]
        public string FullyQualifiedDomainName { get; set; }

        /// <summary>
        /// RequestInterval
        /// </summary>
        [JsonProperty(PropertyName = "RequestInterval")]
        public int RequestInterval { get; set; }

        /// <summary>
        /// FailureThreshold
        /// </summary>
        [JsonProperty(PropertyName = "FailureThreshold")]
        public int FailureThreshold { get; set; }

        /// <summary>
        /// MeasureLatency
        /// </summary>
        [JsonProperty(PropertyName = "MeasureLatency")]
        public bool MeasureLatency { get; set; }

        /// <summary>
        /// Inverted
        /// </summary>
        [JsonProperty(PropertyName = "Inverted")]
        public bool Inverted { get; set; }

        /// <summary>
        /// EnableSNI
        /// </summary>
        [JsonProperty(PropertyName = "EnableSNI")]
        public bool EnableSNI { get; set; }

        /// <summary>
        /// AlarmIdentifier
        /// </summary>
        [JsonProperty(PropertyName = "AlarmIdentifier")]
        public string AlarmIdentifier { get; set; }

        /// <summary>
        /// Regions
        /// </summary>
        [JsonProperty(PropertyName = "Regions")]
        public string Regions { get; set; }

        /// <summary>
        /// SearchString
        /// </summary>
        [JsonProperty(PropertyName = "SearchString")]
        public int? SearchString { get; set; }

        /// <summary>
        /// IPAddress
        /// </summary>
        [JsonProperty(PropertyName = "IPAddress")]
        public int? IPAddress { get; set; }

        /// <summary>
        /// HealthThreshold
        /// </summary>
        [JsonProperty(PropertyName = "HealthThreshold")]
        public int? HealthThreshold { get; set; }

        /// <summary>
        /// InsufficientDataHealthStatus
        /// </summary>
        [JsonProperty(PropertyName = "InsufficientDataHealthStatus")]
        public string InsufficientDataHealthStatus { get; set; }

        /// <summary>
        /// ChildHealthChecks
        /// </summary>
        [JsonProperty(PropertyName = "ChildHealthChecks")]
        public string ChildHealthChecks { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Fqdn == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Fqdn");
            }
            if (Application == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Application");
            }
            if (Environment == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Environment");
            }
            if (Owner == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Owner");
            }
            if (Comment == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Comment");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (ResourcePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ResourcePath");
            }
            if (FullyQualifiedDomainName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FullyQualifiedDomainName");
            }
            if (this.Port > 10)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Port", 10);
            }
            if (this.Port < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Port", 1);
            }
            if (this.RequestInterval > 10)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "RequestInterval", 10);
            }
            if (this.RequestInterval < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "RequestInterval", 1);
            }
            if (this.FailureThreshold > 10)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "FailureThreshold", 10);
            }
            if (this.FailureThreshold < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "FailureThreshold", 1);
            }
        }
    }
}
