// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace TodoListService-ManualJwt.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// ZoneAddPayload for Add Body Parameters
    /// </summary>
    public partial class ZoneAddPayload
    {
        /// <summary>
        /// Initializes a new instance of the ZoneAddPayload class.
        /// </summary>
        public ZoneAddPayload() { }

        /// <summary>
        /// Initializes a new instance of the ZoneAddPayload class.
        /// </summary>
        public ZoneAddPayload(string zoneID, string zoneFQDN, string owner, string approvalDL, string teamDL, string backendService, string adGroup, string approvalSettings, string serviceAcctGroup, string zoneType)
        {
            ZoneID = zoneID;
            ZoneFQDN = zoneFQDN;
            Owner = owner;
            ApprovalDL = approvalDL;
            TeamDL = teamDL;
            BackendService = backendService;
            AdGroup = adGroup;
            ApprovalSettings = approvalSettings;
            ServiceAcctGroup = serviceAcctGroup;
            ZoneType = zoneType;
        }

        /// <summary>
        /// zoneID
        /// </summary>
        [JsonProperty(PropertyName = "zoneID")]
        public string ZoneID { get; set; }

        /// <summary>
        /// zoneFQDN
        /// </summary>
        [JsonProperty(PropertyName = "zoneFQDN")]
        public string ZoneFQDN { get; set; }

        /// <summary>
        /// owner
        /// </summary>
        [JsonProperty(PropertyName = "owner")]
        public string Owner { get; set; }

        /// <summary>
        /// approvalDL
        /// </summary>
        [JsonProperty(PropertyName = "approvalDL")]
        public string ApprovalDL { get; set; }

        /// <summary>
        /// teamDL
        /// </summary>
        [JsonProperty(PropertyName = "teamDL")]
        public string TeamDL { get; set; }

        /// <summary>
        /// backendService
        /// </summary>
        [JsonProperty(PropertyName = "backendService")]
        public string BackendService { get; set; }

        /// <summary>
        /// adGroup
        /// </summary>
        [JsonProperty(PropertyName = "adGroup")]
        public string AdGroup { get; set; }

        /// <summary>
        /// approvalSettings
        /// </summary>
        [JsonProperty(PropertyName = "approvalSettings")]
        public string ApprovalSettings { get; set; }

        /// <summary>
        /// serviceAcctGroup
        /// </summary>
        [JsonProperty(PropertyName = "serviceAcctGroup")]
        public string ServiceAcctGroup { get; set; }

        /// <summary>
        /// zoneType
        /// </summary>
        [JsonProperty(PropertyName = "zoneType")]
        public string ZoneType { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (ZoneID == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ZoneID");
            }
            if (ZoneFQDN == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ZoneFQDN");
            }
            if (Owner == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Owner");
            }
            if (ApprovalDL == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ApprovalDL");
            }
            if (TeamDL == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TeamDL");
            }
            if (BackendService == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BackendService");
            }
            if (AdGroup == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AdGroup");
            }
            if (ApprovalSettings == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ApprovalSettings");
            }
            if (ServiceAcctGroup == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ServiceAcctGroup");
            }
            if (ZoneType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ZoneType");
            }
        }
    }
}
