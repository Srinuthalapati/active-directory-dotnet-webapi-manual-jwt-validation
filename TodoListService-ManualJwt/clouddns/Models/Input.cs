// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace TodoListService-ManualJwt.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Input
    /// </summary>
    public partial class Input
    {
        /// <summary>
        /// Initializes a new instance of the Input class.
        /// </summary>
        public Input() { }

        /// <summary>
        /// Initializes a new instance of the Input class.
        /// </summary>
        public Input(double a, double b, string op)
        {
            A = a;
            B = b;
            Op = op;
        }

        /// <summary>
        /// a
        /// </summary>
        [JsonProperty(PropertyName = "a")]
        public double A { get; set; }

        /// <summary>
        /// b
        /// </summary>
        [JsonProperty(PropertyName = "b")]
        public double B { get; set; }

        /// <summary>
        /// binary op of ['+', 'add', '-', 'sub', '*', 'mul', '%2F', 'div']
        /// </summary>
        [JsonProperty(PropertyName = "op")]
        public string Op { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Op == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Op");
            }
            if (this.A > 10)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "A", 10);
            }
            if (this.A < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "A", 1);
            }
            if (this.B > 10)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "B", 10);
            }
            if (this.B < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "B", 1);
            }
        }
    }
}
