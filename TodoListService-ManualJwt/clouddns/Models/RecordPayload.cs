// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace TodoListService-ManualJwt.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// RecordPayload for Add &amp; Update Body Parameters
    /// </summary>
    public partial class RecordPayload
    {
        /// <summary>
        /// Initializes a new instance of the RecordPayload class.
        /// </summary>
        public RecordPayload() { }

        /// <summary>
        /// Initializes a new instance of the RecordPayload class.
        /// </summary>
        public RecordPayload(string recordType, string fqdn, string value, string resourceRecords, string owner, string teamDL, string comment, string application, string environment, string hostedZoneId, string dNSName, bool evaluateTargetHealth, string setIdentifier, string routingpolicy, string subdivisionCode, string continentCode, string countryCode, bool multiValueAnswer, int weight, string region, string healthCheckId, string failover)
        {
            RecordType = recordType;
            Fqdn = fqdn;
            Value = value;
            ResourceRecords = resourceRecords;
            Owner = owner;
            TeamDL = teamDL;
            Comment = comment;
            Application = application;
            Environment = environment;
            HostedZoneId = hostedZoneId;
            DNSName = dNSName;
            EvaluateTargetHealth = evaluateTargetHealth;
            SetIdentifier = setIdentifier;
            Routingpolicy = routingpolicy;
            SubdivisionCode = subdivisionCode;
            ContinentCode = continentCode;
            CountryCode = countryCode;
            MultiValueAnswer = multiValueAnswer;
            Weight = weight;
            Region = region;
            HealthCheckId = healthCheckId;
            Failover = failover;
        }

        /// <summary>
        /// recordType
        /// </summary>
        [JsonProperty(PropertyName = "recordType")]
        public string RecordType { get; set; }

        /// <summary>
        /// fqdn
        /// </summary>
        [JsonProperty(PropertyName = "fqdn")]
        public string Fqdn { get; set; }

        /// <summary>
        /// value
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// ResourceRecords
        /// </summary>
        [JsonProperty(PropertyName = "ResourceRecords")]
        public string ResourceRecords { get; set; }

        /// <summary>
        /// owner
        /// </summary>
        [JsonProperty(PropertyName = "owner")]
        public string Owner { get; set; }

        /// <summary>
        /// teamDL
        /// </summary>
        [JsonProperty(PropertyName = "teamDL")]
        public string TeamDL { get; set; }

        /// <summary>
        /// comment
        /// </summary>
        [JsonProperty(PropertyName = "comment")]
        public string Comment { get; set; }

        /// <summary>
        /// application
        /// </summary>
        [JsonProperty(PropertyName = "application")]
        public string Application { get; set; }

        /// <summary>
        /// environment
        /// </summary>
        [JsonProperty(PropertyName = "environment")]
        public string Environment { get; set; }

        /// <summary>
        /// HostedZoneId
        /// </summary>
        [JsonProperty(PropertyName = "HostedZoneId")]
        public string HostedZoneId { get; set; }

        /// <summary>
        /// DNSName
        /// </summary>
        [JsonProperty(PropertyName = "DNSName")]
        public string DNSName { get; set; }

        /// <summary>
        /// EvaluateTargetHealth
        /// </summary>
        [JsonProperty(PropertyName = "EvaluateTargetHealth")]
        public bool EvaluateTargetHealth { get; set; }

        /// <summary>
        /// SetIdentifier
        /// </summary>
        [JsonProperty(PropertyName = "SetIdentifier")]
        public string SetIdentifier { get; set; }

        /// <summary>
        /// routingpolicy
        /// </summary>
        [JsonProperty(PropertyName = "routingpolicy")]
        public string Routingpolicy { get; set; }

        /// <summary>
        /// SubdivisionCode
        /// </summary>
        [JsonProperty(PropertyName = "SubdivisionCode")]
        public string SubdivisionCode { get; set; }

        /// <summary>
        /// ContinentCode
        /// </summary>
        [JsonProperty(PropertyName = "ContinentCode")]
        public string ContinentCode { get; set; }

        /// <summary>
        /// CountryCode
        /// </summary>
        [JsonProperty(PropertyName = "CountryCode")]
        public string CountryCode { get; set; }

        /// <summary>
        /// MultiValueAnswer
        /// </summary>
        [JsonProperty(PropertyName = "MultiValueAnswer")]
        public bool MultiValueAnswer { get; set; }

        /// <summary>
        /// Weight
        /// </summary>
        [JsonProperty(PropertyName = "Weight")]
        public int Weight { get; set; }

        /// <summary>
        /// Region
        /// </summary>
        [JsonProperty(PropertyName = "Region")]
        public string Region { get; set; }

        /// <summary>
        /// HealthCheckId
        /// </summary>
        [JsonProperty(PropertyName = "HealthCheckId")]
        public string HealthCheckId { get; set; }

        /// <summary>
        /// Failover
        /// </summary>
        [JsonProperty(PropertyName = "Failover")]
        public string Failover { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (RecordType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RecordType");
            }
            if (Fqdn == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Fqdn");
            }
            if (Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Value");
            }
            if (ResourceRecords == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ResourceRecords");
            }
            if (Owner == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Owner");
            }
            if (TeamDL == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TeamDL");
            }
            if (Comment == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Comment");
            }
            if (Application == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Application");
            }
            if (Environment == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Environment");
            }
            if (HostedZoneId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "HostedZoneId");
            }
            if (DNSName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DNSName");
            }
            if (SetIdentifier == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SetIdentifier");
            }
            if (Routingpolicy == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Routingpolicy");
            }
            if (SubdivisionCode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SubdivisionCode");
            }
            if (ContinentCode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ContinentCode");
            }
            if (CountryCode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CountryCode");
            }
            if (Region == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Region");
            }
            if (HealthCheckId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "HealthCheckId");
            }
            if (Failover == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Failover");
            }
            if (this.Weight > 10)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Weight", 10);
            }
            if (this.Weight < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Weight", 1);
            }
        }
    }
}
